apply plugin: 'checkstyle'          // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
apply plugin: 'findbugs'            // https://docs.gradle.org/3.3/userguide/findbugs_plugin.html
apply plugin: 'pmd'                 // https://docs.gradle.org/current/userguide/pmd_plugin.html

final def qualityDir = buildscript.sourceFile.getParent()
final def reportsDir = "$project.buildDir/reports"

check.dependsOn 'checkFileNames', 'checkCodeStyle', 'findBugs', 'pmdCheck'

// http://checkstyle.sourceforge.net/
checkstyle {
    toolVersion '8.31'
    showViolations true
}

// https://pmd.github.io/
pmd {
    toolVersion = '6.22.0'
}

task checkFileNames(type: Checkstyle, group: 'Verification', description: 'Check file naming convention.') {
    configFile file("$qualityDir/checkstyle/naming_convention.xml")
    source 'src'
    include '**/*.java'
    include '**/*.xml'
    include '**/*.png'
    include '**/*.jpg'
    include '**/*.webp'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        xml {
            destination file("$reportsDir/checkstyle/check_file_names.xml")
        }
    }

    classpath = files()
}

task checkCodeStyle(type: Checkstyle, group: 'Verification', description: 'Run Checkstyle') {
    configFile file("$qualityDir/checkstyle/google_checks.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        xml {
            destination file("$reportsDir/checkstyle/check_code_style.xml")
        }
    }

    classpath = files()
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('compile') && task.name.endsWith('Sources')) {
        tasks.getByName('findBugs').dependsOn task
    }
}

// http://findbugs.sourceforge.net/
task findBugs(type: FindBugs,
    group: 'Verification',
    description: 'Run FindBugs') {

    ignoreFailures = false
    effort = "max"
    reportLevel = "high"
    excludeFilter = new File("$qualityDir/findbugs/android-exclude-filter.xml")
    classes = files("$project.buildDir/intermediates/app_classes")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        // XML and HTML cannot be used at the same time
        xml.enabled = false
        html.enabled = !xml.isEnabled()
        xml {
            destination file("$reportsDir/findbugs/findbugs.xml")
            withMessages true
        }
        html {
            destination file("$reportsDir/findbugs/findbugs.html")
        }
    }

    classpath = files()
}


task pmdCheck(type: Pmd, group: 'Verification', description: 'Run PMD') {
    ruleSetFiles = files("$qualityDir/pmd/pmd-ruleset.xml")
    ignoreFailures = false
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        html.enabled = true
        xml {
            destination file("$reportsDir/pmd/pmd.xml")
        }
        html {
            destination file("$reportsDir/pmd/pmd.html")
        }
    }
}